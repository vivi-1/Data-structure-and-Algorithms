Chapter 3
Q1: function​ isLeapYear(year) {
​ 	  ​return​ (year % 100 === 0) ? (year % 400 === 0) : (year % 4 === 0);
    }

O(1)

Q2: ​function​ arraySum(array) {
​ 	  ​let​ sum = 0;
​
​ 	  ​for​(​let​ i = 0; i < array.length; i++) {
​ 	    sum += array[i];
​ 	  }
​
​ 	  ​return​ sum;
​ 	}
O(N)

Q3: O(logN)
Q4: O(N)
Q5: O(1)




Chapter 4

Q1: 100 100 7 10000
    2000 2000 11 4000000

Q2: 16

Q3: O(N^2)

Q4:
 def​ ​greatestNumber​(array):
    gv=array[0]
​ 	 for i in array:
        gv < i:
        gv = i
​ 	 return​ gv;



Chapter 5
Q1: O(N)
Q2: O(N^2)
Q3: O(N)
Q4: O(N)
Q5: O(N^2)


Chapter 6
Q1: O(N2)
Q2: O(N)
Q3:
  best: O(1)
  average: O(N^2)
  worst: O(N^2)
  Expression: No two elements can be added to 10. So we need to go through all
  the elements in the two arrays:  N * N = N^2 (N as the amount of elements)
Q4: O(N)
modification:
function​ containsX(string) {
​ 	  ​for​(​let​ i = 0; i < string.length; i++) {
​ 	    ​if​ (string[i] === ​"X"​) {
​ 	      return ​true​;
          break;
​ 	    }
​ 	  }
​ 	  ​return​ false;
​ 	}


Chapter 7
Q1: O(N)
Q2: O(N)
Q3: O(N^2)
Q4: O(N^3)
Q5: O(logN)


Chapter8 (python)
#Q1:
def intersection(arr1, arr2):
    arrlib = {}
    result = []
    for x in arr1:
        arrlib[x] = True
    for y in arr2:
        if y in arrlib.keys():
            result.append(y)
    print (result)
arr1 = {0, 2, 4, 6, 8}
arr2 = {1, 2, 3, 4, 5}
intersection(arr1, arr2)

#Q2:
def fdup(arr):
    arrlib = {}
    for x in arr:
        if x in arrlib.keys():
            print(x)
            break
        else:
            arrlib[x] = True

arr3 = ['a', 'b', 'c', 'd', 'c', 'e', 'f']
fdup(arr3)



#Q3:
arrlib3 = {'a':True, 'b':True, 'c':True, 'd':True, 'e':True, 'f':True, 'h':True, 'i':True, 'j':True, 'k':True, 'l':True, 'm':True, 'n':True, 'o':True, 'p':True, 'q':True, 'r':True, 's':True, 't':True, 'u':True, 'v':True, 'w':True, 'x':True, 'y':True, 'z':True}
def fmiss(str):
    result = []
    arrlib= {}
    str1 = "abcdefghijklmnopqrstuvwxyz"
    for x in str:
        arrlib[x] = True
    for y in str1:
        if arrlib.get(y) is None:
            result.append(y)
    print (result)
str1 = "the quick brown box jumps over a lazy dog"
fmiss(str1)

#Q4:
def fndup(str):
    arrlib = {}
    for x in str:
        arrlib[x] = 0
        arrlib[x] += 1
    for x in str:
        if arrlib[x] == 1:
            print (x)
            break
str2 = "minimum"
fndup(str2)


Chapter 9
Q1: I will do FIFO which is a queue
Q2: 6 and 5
Q3: 3
Q4:
def rev(str):
    temp1 = []
    temp2 = ""
    for x in str:
        temp1.append(x)
    for i in range(0, len(str)):
        temp2 += temp1.pop()
    print(temp2)

word = "abcde"
rev(word)


Chapter 10
Q1: Base case is when low = high +2 (eg.if high = 10, then base case is when low=12)
Q2: if n is an even number, it will be indefinite because it will miss the base case since n===1 will not happen
Q3:
​def​ ​sum​(low, high)
​ 	  ​return​ high + sum(low, high - 1)
     return low if high == low
​ 	​end​
Q4:
def print_mix(arr):
    for i in arr:
        if isinstance(i, int) == True:
            print (i)
        else:
            print_mix(i)
array = [1,2,3,[4, 5, 6], 7,[8,[9, 10, 11,[12, 13, 14]]],[15, 16, 17, 18, 19,[20, 21, 22,[23, 24, 25,[26, 27, 29]], 30, 31], 32], 33]
print_mix(array)


Chapter 11
Q1:
def s_len(arr):
    if len(arr) == 1:
        return len(arr[0])
    return len(arr[0]) + s_len(arr[1: ])
inp = ["ab", "c", "def", "ghij"]
print (s_len(inp))


Q2:
def piceven(arr):
    if len(arr) == 0:
        return []
    else:
        if (arr[0] % 2) == 0:
            return arr[0:1] + piceven(arr[1:len(arr)])
        else:
            return piceven(arr[1:len(arr)])
array2 = [1,2,3,4,5,6,7,8,9,10]
print(piceven(array2))

Q3:
def tranN(n):
    if n==1:
        return 1
    else:
        return n + tranN(n-1)
print(tranN(6))

Q4:
def xindex(str):
    if str[0] == 'x':
        return 0
    else:
        return 1 + xindex(str[1:len(str)])
print(xindex("abcdefghijklmnopqrstuvwxyz"))


Q5:
def shortway(r, c):
    if r == 0 or c == 0:
        print ("r=0=c")
        return 0
    if r == 1 == c:
        return 0
    if c == 1 and r != 1:
        return 1 + shortway(r-1, 1)
    if r == 1 and c != 1:
        return 1 + shortway(1, c-1)
    if c > 1 and r > 1:
        print ("r=1")
        print(shortway(r-1, c-1))
        return 2 + shortway(r-1, c-1)
print(shortway(3, 3))


Chapter 12
Q1:
def​ ​add_until_100​(array)
​ 	  ​return​ 0 ​if​ array.​length​ == 0
     sum_now = array[0] + add_until_100(array[1, array.​length​ - 1])
​ 	  ​if​ sum_now > 100
​ 	    ​return​ sum_now - array[0]
​ 	  ​else​
​ 	    ​return​ sum_now
​ 	  ​end​
​end​

Q2:
def​ ​golomb​(n, memo = {})
​ 	  ​return​ 1 ​if​ n == 1
     if ! memo[n]
        memo[n] = 1 + golomb(n - golomb(golomb(n-1, memo), memo), memo)
     end
​ 	  ​return​ memo[n];
​​end​

Q3:
def​ ​unique_paths​(rows, columns, memo{})
​ 	  ​return​ 1 ​if​ rows == 1 || columns == 1
     if !memo[[row, columns]]:
        memo[[row, columns]] = unique_paths(rows - 1, columns, memo) + unique_paths(rows, columns - 1, memo)
​ 	  ​end
    return​ memo[[row, columns]]
​​end​

Chapter13
Q1: sort in python has efficiency as O(N*logN)
def highestInThree(arr):
    arr = sorted(arr)
    l = len(arr) - 1
    return arr[l] * arr[l-1] * arr[l-2]
array3 = [11,8,3,4,5,6,7,8,9,10]
print(highestInThree(array3))

Q2:
def findMissingNumber(arr):
    arr = sorted(arr)
    for i in range(0, len(arr)):
        if i != arr[i]:
            return i
array4 =  [9, 3, 2, 5, 6, 7, 1, 0, 4]
print(findMissingNumber(array4))

Q3:Bubble sort as O(N^2) method, Quicksort as O(NlogN) and
    insertion sort as O(N^2/2)
array3 = [11,8,3,4,5,6,7,8,9,10]
def findGreatestNumber1(arr):
    for i in range(0, len(arr)-1):
        if arr[i] < arr[i+1]:
            arr[i], arr[i+1] = arr[i+1], arr[i]
    return arr[0]

print(findGreatestNumber1(array3))

def findGreatestNumber2(arr):
    arr = sorted(arr)
    return arr[len(arr) - 1]
print(findGreatestNumber2(array3))

def findGreatestNumber3(arr):
    for i in range(1, len(arr)):
        j = i - 1
        for j in range(0, i):
            while arr[j] > arr[i]:
                arr[j+1] = arr[j]
                j -= 1
        arr[j+1] = arr[i]
        print(j)
    return arr[len(arr)-1]
print(findGreatestNumber3(array3))


Chapter14
Q1, Q3, Q4
class Node:
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next

class LinkedList:
    def __init__(self):
        self.head = None
    def print_LinkList(self):
        current = self.head
        while current:
            print (current.data)
            current = current.next
    def insert_end(self, data):
        new_node = Node(data)
        if(self.head):
            current = self.head
            while(current.next):
                current = current.next
            current.next = new_node
        else:
            self.head = new_node
            return
    def print_lastelement(self):
        current = self.head
        while current.next:
            current = current.next
        print(current.data)
    def reverse(self):
        prev = None
        current = self.head
        while current:
            next = current.next
            current.next = prev
            prev = current
            current = next
            if next:
                next = next.next
        self.head = prev
    def delete_mid(self, node):
        next = node.next
        while node.next:
            node.data = next.data
            node = next
        node = None

list1 = LinkedList()
e1 = Node("Kevin")
list1.insert_end("Wei")
list1.insert_end("Wang")
list1.insert_end(e1)
list1.insert_end("Yu")

list1.print_LinkList()
list1.print_lastelement()

list1.reverse()
list1.print_LinkList()

list1.delete_mid(e1)
list1.print_LinkList()

Q2:
class Node2:
    def __init__(self, data=None, next=None, prev = None):
        self.data = data
        self.prev = prev
        self.next = next
class DoublyLinkedList:
    def __init__(self):
        self.head = None
    def print_LinkList(self):
        current = self.head
        while current:
            print (current.data)
            current = current.next
    def append(self, data):
        new_node = Node2(data)
        new_node.next = None
        if(self.head):
            current = self.head
            while(current.next):
                current = current.next
            current.next = new_node
            new_node.prev = current
        else:
            new_node.prev = None
            self.head = new_node
            return

Chapter15
Q1:   1
              5
        2          9
           4     6   10
         3         8

Q2: logN
Q3:
class NodeTree:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data
    def insert(self, data):
        if self.data:
            if data <  self.data:
                if self.left == None:
                    self.left = NodeTree(data)
                else:
                    self.left.insert(data)
            elif data > self.data:
                if self.right == None:
                    self.right = NodeTree(data)
                else:
                    self.right.insert(data)
        else:
            self.data = data
    def treePrint(self):
        if self.left:
            self.left.treePrint()
        print(self.data)
        if self.right:
            self.right.treePrint()
    def printGreatestValue(node):
        if node.right == None:
            return node.data
        else:
            return node.right.printGreatestValue()

list2 = NodeTree(1)

list2.insert(2)
list2.insert(3)
list2.insert(4)
list2.insert(5)

list2.treePrint()
print(list2.printGreatestValue())

Q4: Moby Dick-Great Expectations-Alice in Wonderland-Lord ofFlies-Robinson Crusoe
    -Pride and Prejudice-The Odyssey

Q5: The Odyssey-Pride and Prejudice-Robinson Crusoe-Lord ofFlies-
    -Alice in Wonderland-Great Expectations-Moby Dick


Chapter 16
Q1:
                            11
                10                        8
            6        9                7       4
          2   1    3    5

Q2:
                            9
                6                        8
            3        5               7        4
          2   1

Q3:
Max-heap: 99, 68, 55, 34, 22, 10, 2
Min-heap: 2, 10, 22, 34, 55, 68, 99

Chapter 17
Q1: tag tank tap today total we well went
Q2:
Q3 Q4:
class TrieNode:
    def __init__(self, char):
        self.char = char
        self.end = False
        self.counter = 0
        self.children = {}
class Trie(object):
    def __init__(self):
        self.root = TrieNode("")
    def insert(self, word):
        node = self.root
        for char in word:
            if char in node.children:
                node = node.children[char]
            else:
                newNode = TrieNode(char)
                node.children[char] = newNode
                node = newNode
        node.children['*'] = None
        node.end = True
        node.counter += 1
    def traverse(self, node):
        for char in node.children:
            print(char)
            if char != '*':
                self.traverse(node.children[char])
    def collection(self, node = None, word="", words=[]):
        currentNode = node or self.root
        for key in currentNode.children:
            if key == '*':
                words.append(word)
            else:
                self.collection(node.children[key], word+key, words)
        return words
    def autocorrection(self, word):
        node = self.root
        temp = ""
        for char in word:
            if char in node.children:
                node = node.children[char]
                temp += char
            else:
                return temp + self.collection(node, "", [])[0]
        return word

list3 = Trie()
list3.insert("wang")
list3.insert("Wei")
list3.insert("yu")
list3.insert("kevin")
list3.insert("want")
list3.insert("weight")

#list3.traverse(list3.root)

print(list3.autocorrection("kw"))


Chapter 18
Q1: nail polish, needles, pins, hammer
Q2: A-B-E-J-F-O-C-G-K-D-H-L-M-I-N-P
Q3: A-B-C-D-E-F-G-H-I-J-K-L-M-N-O-P
Q4:(Ruby)
def​ bfs​(starting_vertex, search_value)
​     queue = Queue.​new​
​
​     visited_vertices = {}
​ 	  visited_vertices[starting_vertex.​value​] = ​true​
​ 	  queue.​enqueue​(starting_vertex)
​
​ 	  ​while​ queue.​read​
​ 	    current_vertex = queue.​dequeue​
       return current_vertex.value if current_vertex.​value​ == search_value
​ 	    current_vertex.​adjacent_vertices​.​each​ ​do​ |adjacent_vertex|
​​ 	      ​if​ !visited_vertices[adjacent_vertex.​value​]
​​ 	        visited_vertices[adjacent_vertex.​value​] = ​true​
​​ 	        queue.​enqueue​(adjacent_vertex)
​ 	      ​end​
​ 	    ​end​
​ 	  ​end​
     return nil
​ 	​end​

Chapter 19
Q1: Space complexity O(N)
Q2: Space complexity O(N)
Q3:
def reverse(arr):
    len1 = len(arr)
    for i in range(0, int(len1/2)):
            arr[i], arr[len1-1-i] = arr[len1-1-i], arr[i]

arr4 = ['a', 'b', 'c', 'd', 'c', 'e']
reverse(arr4)
print(arr4)

Q4:
Version #1:
Time Complexity: O(N)
Space Complexity: O(N)

Version #2:
Time Complexity: O(N)
Space Complexity: O(1)

Version #3:
Time Complexity: O(N)
Space Complexity: O(N)

Chapter 20
